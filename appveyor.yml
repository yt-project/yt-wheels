environment:
  global:
    REPO_DIR: yt
    PACKAGE_NAME: yt
    BUILD_COMMIT: yt-4.0.0
    OTHER_BUILD_DEP: "cython"
    OTHER_TEST_DEP: "nose"
    GEN_DEP: "setuptools sympy matplotlib ipython"
    EXTRA_FLAGS: ""

  matrix:
    - PYTHON: C:\Python36
      NP_BUILD_DEP: "numpy==1.15.4"
      NP_TEST_DEP: "numpy==1.15.4"
    - PYTHON: C:\Python36-x64
      NP_BUILD_DEP: "numpy==1.15.4"
      NP_TEST_DEP: "numpy==1.15.4"
    - PYTHON: C:\Python37
      NP_BUILD_DEP: "numpy==1.16.5"
      NP_TEST_DEP: "numpy==1.16.5"
    - PYTHON: C:\Python37-x64
      NP_BUILD_DEP: "numpy==1.16.5"
      NP_TEST_DEP: "numpy==1.16.5"
    - PYTHON: C:\Python38
      NP_BUILD_DEP: "numpy==1.17.5"
      NP_TEST_DEP: "numpy==1.17.5"
    - PYTHON: C:\Python38-x64
      NP_BUILD_DEP: "numpy==1.17.5"
      NP_TEST_DEP: "numpy==1.17.5"

matrix:
  fast_finish: true

install:
  # Fetch submodules
  - git submodule update --init --recursive
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
  - python -m pip install -U pip

  # Fix MSVC builds for 64-bit Python. See:
  # http://stackoverflow.com/questions/32091593/cannot-install-windows-sdk-7-1-on-windows-10
  - echo "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 > "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64/vcvars64.bat"

  # Check that we have the expected version and architecture for Python
  - python --version
  - python -c "import struct; print(struct.calcsize('P') * 8)"

build_script:
  # Install the dependencies of the project.
  - python -m pip install %NP_BUILD_DEP% %OTHER_BUILD_DEP%
  # Build wheel
  - python -m pip install wheel
  - cd %REPO_DIR%
  - git checkout %BUILD_COMMIT%
  - python setup.py bdist_wheel
  - cd ..

test_script:
  # create test env
  - virtualenv --python %PYTHON%\Python.exe test_env
  - test_env\Scripts\activate.bat
  - where python
  - python -m pip install %NP_TEST_DEP% %OTHER_TEST_DEP% %GEN_DEP%

  # install yt from wheels we built
  - python -m pip install --pre --no-index --find-links %REPO_DIR%\dist\ %PACKAGE_NAME%

  # Change into an innocuous directory and find tests from installation
  - mkdir for_testing
  - cd for_testing
  - python --version
  - python -c "import yt"
  - cd ..

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: "%REPO_DIR%\\dist\\*"

on_success:
  # Upload the generated wheels to anaconda.org/multibuild-wheels-staging
  # using YT_STAGING_UPLOAD_TOKEN which is set as an environment variable 
  # in the appveyor CI configuration settings. The current token was generated 
  # by munkm at https://anaconda.org/multibuild-wheels-staging/settings/access
  #
  #
  - python -m pip install git+https://github.com/Anaconda-Server/anaconda-client
  - IF NOT "%YT_STAGING_UPLOAD_TOKEN%" == "" echo "anaconda token detected"
  - IF NOT "%YT_STAGING_UPLOAD_TOKEN%" == "" anaconda -t %YT_STAGING_UPLOAD_TOKEN% upload --force -u "multibuild-wheels-staging" "yt\dist\*.whl"
