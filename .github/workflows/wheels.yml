# Workflow to build and test wheels
name: Wheel builder

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # Build the wheels for Linux, Windows and macOS for Python 3.7 and newer
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python: [37, 38, 39]
        bitness: [32, 64]
        manylinux_image: [manylinux1, manylinux2010]
        include:
          # Run 32 and 64 bit version in parallel for Linux and Windows
          - os: windows-latest
            bitness: 64
            platform_id: win_amd64
          - os: windows-latest
            bitness: 32
            platform_id: win32
          - os: ubuntu-latest
            bitness: 64
            platform_id: manylinux_x86_64
          - os: ubuntu-latest
            bitness: 32
            platform_id: manylinux_i686
          - os: macos-latest
            bitness: 64
            platform_id: macosx_x86_64
        exclude:
          - os: macos-latest
            bitness: 32
          # Remove manylinux1 from the windows and osx build matrix since
          # manylinux_image is not used for these platforms
          - os: windows-latest
            manylinux_image: manylinux1
          - os: macos-latest
            manylinux_image: manylinux1

    steps:
      - name: Checkout repo
        uses: actions/checkout@v1
        with:
          submodules: 'true'

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Build and test wheels
        env:
          CONFTEST_PATH: ${{ github.workspace }}/yt/conftest.py
          CONFTEST_NAME: conftest.py
          CIBW_ENVIRONMENT: OMP_NUM_THREADS=2
                            OPENBLAS_NUM_THREADS=2
                            SKLEARN_SKIP_NETWORK_TESTS=1
                            SKLEARN_BUILD_PARALLEL=3
                            MACOSX_DEPLOYMENT_TARGET=10.13
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: bash build_tools/github/repair_windows_wheels.sh {wheel} {dest_dir} ${{ matrix.bitness }}
          CIBW_BEFORE_TEST_WINDOWS: bash build_tools/github/build_minimal_windows_image.sh ${{ matrix.python }} ${{ matrix.bitness }}
          CIBW_TEST_REQUIRES: pytest pandas threadpoolctl
          CIBW_TEST_COMMAND: bash {project}/build_tools/github/test_wheels.sh
          CIBW_TEST_COMMAND_WINDOWS: bash {project}/build_tools/github/test_windows_wheels.sh ${{ matrix.python }} ${{ matrix.bitness }}
          CIBW_BUILD_VERBOSITY: 1

        run: bash build_tools/github/build_wheels.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

  # Upload the wheels
  upload_anaconda:
    name: Upload to Anaconda
    runs-on: ubuntu-latest
    needs: [build_wheels]
    # The artifacts cannot be uploaded on PRs
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v1
        with: 
          submodules: 'true'

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Upload artifacts
        env:
          # Secret variables need to be mapped to environment variables explicitly
          YT_STAGING_UPLOAD_TOKEN: ${{ secrets.YT_STAGING_UPLOAD_TOKEN }}
        # Upload the generated wheels to anaconda.org/multibuild-wheels-staging
        # using YT_STAGING_UPLOAD_TOKEN which is set as an environment variable 
        # in the travis CI configuration settings. The current token was generated 
        # by munkm at https://anaconda.org/multibuild-wheels-staging/settings/access
        #
        # Force a replacement if the remote file already exists
        run: bash build_tools/github/upload_anaconda.sh
